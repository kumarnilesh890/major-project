provider "aws" {
  region = "ap-south-1"
}
resource "aws_vpc" "vpc" {
  cidr_block = "10.0.0.0/16"
}


resource "aws_subnet" "subnet" {
  vpc_id     = aws_vpc.vpc.id
  cidr_block = "10.0.0.0/25"
  avaibility_zone = "ap-south-1"

  tags = {
    Name = "subnet"
  }
}
resource "aws_subnet" "subnet2" {
  vpc_id     = aws_vpc.vpc.id
  cidr_block = "10.0.0.128/25"
  avaibility_zone = "ap-south-1"

  tags = {
    Name = "subnet"
  }
}


resource "aws_internet_gateway" "IGW" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "IGW"
  }
}

resource "aws_route_table" "RT" {
  vpc_id = aws_vpc.vpc.id

  route {
     cidr_block = "0.0.0.0/0"
     gateway_id = aws_internet_gateway.IGW.id
    }
}


resource "aws_route_table_association" "RT1" {
  subnet_id      = aws_subnet.subnet.id
  route_table_id = aws_route_table.RT.id
}
resource "aws_route_table_association" "RT2" {
   subnet_id      = aws_subnet.subnet2.id
   route_table_id = aws_route_table.RT.id
}



resource "aws_network_interface" "NI" {
  subnet_id       = aws_subnet.subnet.id
}


resource "aws_instance" "instance" {
  ami           = "ami-02e136e904f3da870" # us-west-2
  instance_type = "t2.micro"

  network_interface {
    network_interface_id = aws_network_interface.NI.id
    device_index         = 0
  }
}


resource "aws_lb" "LB" {
  name               = "LB-lb-tf"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.subnet.id,aws_subnet.subnet2.id]

  enable_deletion_protection = true
}

resource "aws_lb_target_group" "TG" {
  name     = "TG"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.vpc.id
}

resource "aws_lb_target_group_attachment" "TGA" {
  target_group_arn = aws_lb_target_group.TG.arn
  target_id        = aws_instance.instance.id
  port             = 80
}


resource "aws_lb_listener" "listener" {
  load_balancer_arn = aws_lb.LB.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.TG.arn
  }
}


resource "aws_security_group" "SG" {
  name        = "SG"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.vpc.id

  ingress = [
    {
      description      = "SG from VPC"
      from_port        = 80
      to_port          = 80
      protocol         = "tcp"
      cidr_blocks      = ["10.0.0.0/24"]
      ipv6_cidr_blocks = ["::/0"]
      prefix_list_ids  = []
      security_groups  = []
      self = false
    }
  ]

  egress = [
    {
      description      = "SSH from VPC"
      from_port        = 0
      to_port          = 0
      protocol         = "-1"
      cidr_blocks      = ["0.0.0.0/0"]
      ipv6_cidr_blocks = ["::/0"]
      prefix_list_ids  = []
      security_groups  = []
      self = false
    }
  ]

  tags = {
    Name = "SG"
  }
}
